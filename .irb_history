IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: 1 , unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
Ingredient.find_by(name: 'ごはん')
Ingredient.all
Ingredient.all
Ingredients.all
Ingredient.all
exit
Ingredient.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] }))
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_i
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
IngredientUnit.includes(:ingredient, :unit)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[1]
price[4]
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })exit
exit
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2] / price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_f)
price[2] / price[3]
price[2].to_i / price[3].to_i
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
Price.all
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[0]
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
Price.all
exit
if !(/[0-9.]+/.match(quantity_unit))\
  eid\
end
!(/[0-9.]+/.match(quantity_unit))
/([大小]+[さじ]*[匙]*)([0-9.]*)[~]*[0-9.]*/.match(quantity_unit)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z]*)/.match(quantity_unit)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = '100～150グラム'
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = '100～150グラム'
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = '100～150g'
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = '100～150g'
quantity_unit = '100～150コ'
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = '100～150コ'
/([0-9]+)[~]+[0-9]+([個本コこケ]*)/.match(quantity_unit)
quantity_unit = '100～150コ'
/([0-9]+)[~]+[0-9]+([個本コこケ]*)/.match(quantity_unit)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
exit
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
exit
quantity_unit
exot
exit
exit
quantity_unit
exit
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
exit
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10~11グラム'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケグラム]*)/)
amount = '10~11グラム'
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(amount)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = "100~150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = "約100~150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100~150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '100~150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100~150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100~150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
exit
exit
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z]*)/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z]*)/)
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/)
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/)
exit
unit = quantity_unit[2]
quantity = quantity_unit[1].to_i
quantity_unit = "#{quantity_unit[2]}#{quantity_unit[1]}"
exit
unit = quantity_unit[2]
unit
quantity = quantity_unit[1].to_i
quantity_unit = "#{quantity_unit[1]}#{quantity_unit[2]}"
if unit == Ingredient.find_by(name: ingredient).base_unit\
  amount = quantity\
else\
  ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i\
  amount = ratio * quantity\
end
cost = amount * Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price
@recipe_id = Recipe.find_by(recipe_url: params[:url]).id
@food_cost = FoodCost.find_or_initialize_by(recipe_id: @recipe_id, quantity_unit: quantity_unit, cost: cost, price_id: Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).id)
if @food_cost.new_record? && !@food_cost.save\
  render :about\
end
exit
unit
exit
unit
exit
unit
exit
unit
exit
unit
exit
unit
ingredient
exit
ingredient
exit
exit
exit
exit
exit
exit
exit
quantity = 1
unit = quantity_unit.match(/[亜-熙ぁ-んァ-ヶ]+/)
unit = quantity_unit.match(/[適量]+/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
unit = quantity_unit.match(/[亜-熙ぁ-んァ-ヶ]+/)
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '100~150g'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '100~150g'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '100~150g'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '少々'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '少々'
unit = quantity_unit.match(/[亜-熙ぁ-んァ-ヶ]/)
exit
quantity = 1
unit = quantity_unit.match(/[^\x01-\x7E]+/)
exit
unit
exit
unit
unit
unit
exit
unit
exit
unit
exit
unit
exit
unit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
unit.string
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
unit
exit
exit
exit
exit
exit
exit
unit
exit
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
amount = ratio * quantity
amount
ratio
quantity
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
amount = ratio * quantity
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
ingredient
unit
exit
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
node
@food_cost = FoodCost.find_or_initialize_by(recipe_id: @recipe_id, quantity_unit: nil, cost: nil, price_id: 100000)
@food_cost.new_record? && !@food_cost.save
next
exit
exit
Unregistereds.find_or_initialize_by(url: url, ingredient: ingredient, quantity: quantity_unit)
exit
url
ingredient
quantity_unit
url
synonym
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit
exit
@unregistered = Unregistereds.find_or_initialize_by(url: url, ingredient: synonym, quantity: quantity_unit)
synonym 
exit
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.quantity_unit, food_costs.cost, food_costs.note")
@food_cost.save if @food_cost.new_record?
@food_cost.save
FoodCost.all
@food_cost = FoodCost.find_or_initialize_by(recipe_id: @recipe_id, quantity_unit: quantity_unit, cost: nil, price_id: 100000, note:synonym)
@food_cost.new_record?
@food_cost.save
FoodCost.all
exit
FoodCost.all
exit
IngredientUnit.all
exit
exit
FoodCost.all
exit
exit
exit
xt
if food_cost.name == '未登録'\
  food_cost.name == '未登録'\
  exit\
  exit\
end
exit
exit
Recipe.destroy_all
exit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
Synonym.find_by(name: synonym)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
(/[0-9.]+/.match(quantity_unit))
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = quantity_unit.match(/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
unit = quantity_unit[2]
quantity = quantity_unit[1].to_f
quantity_unit = "#{quantity_unit[1]}#{quantity_unit[2]}"
@recipe_id = Recipe.find_by(recipe_url: params[:url]).id
 unit == Ingredient.find_by(name: ingredient).base_unit
amount = quantity
cost = amount * Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price
@food_cost = FoodCost.find_or_initialize_by(recipe_id: @recipe_id, quantity_unit: quantity_unit, cost: cost, price_id: Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).id, note: '')
@food_cost.new_record? && !@food_cost.save
@food_cost.new_record?
Recipe.all
FoodCost.all
exit
synonym
exit
synonym
exit
synonym
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
exit
FoodCost.all
amount = '1/2'
amount
amount = '1/2'
/[[/]]/.match(amount)
/\//.match(amount)
amount = /(.)+\/+(.)/.match(amount)
amount = /(.)+[\/]+(.)/.match(amount)
amount = '1/2'
amount
amount = /(.)+[\/]+(.)/.match(amount)
exit
string = '1/2'
string = ''
exit
string = '1/2'
string
amount = /(.)+[\/]+(.)/.match(string)
amount
exit
exit
amount
synonym
quantity
exit
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
unit = quantity_unit[2]
quantity = quantity_unit[1].to_f
exit
exit
exit
/\//.match(quantity)
exit
string = ''
string = 'テスト'
exit
quantity_unit
/\//.match(quantity)
exit
synonym
exit
quantity_unit = quantity_unit.match(/([大小]+[さじ]*[匙]*)([0-9.\/]*)[~〜]*[0-9.\/]*/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
synonym
exit
exit
exit
unit = quantity_unit[1]
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
Synonym.find_by(name: synonym)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
unit = quantity_unit[2]
exit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
unit = quantity_unit[2]
/\//.match(quantity_unit[1])
fraction = quantity_unit[1].match(/\//)
fraction
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
/\//.match(quantity_unit[1])
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
fraction = quantity_unit[1].match(/\//)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|パック|]*)/)
fraction = quantity_unit[1].match(/(0-9)+\/(0-9)/)
fraction = quantity_unit[1].match(/([0-9])+\/([0-9])/)
exit
exit
exit
fraction = quantity_unit[1].match(/([0-9])+\/([0-9])/)
fraction[1].to_i / fraction[2]
fraction[1].to_i / fraction[2].to_i
(fraction[1].to_i / fraction[2].to_i).to_f
fraction[1].to_i
fraction[2].to_i
1/2
(1/2).to_f
@integer = 1/2
(fraction[1].to_f / fraction[2].to_f).round(2)
exit
exit
exit
exit
exit
exit
Recipe.destroy_all
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
ingredient_unit[0]
exit
exit
exit
exit
exit
exit
exit
exit
exit
quantity
synonym
exit
synonym
quantity_unit = quantity_unit.match(/([大小]+[さじ]*[匙]*)([0-9.\/]*)[~〜]*[0-9.\/]*/)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房玉つ人食a-z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|]*)/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房玉つ人食a-z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|]*)/)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
Recipe.all
FoodCost.all
Recipe.all
Recipe.find(6)
Recipe.find(6).recipe_url
exit
FoodCost.where(recipe_id: 6, price_id: 100000)
FoodCost.where(recipe_id: 6, price_id: 100000).destroy_all
FoodCost.all
exit
@recipe = Recipe.find_or_initialize_by(recipe_url: params[:url])
@recipe.new_record? 
@recipe.update_attributes!(recipe_url: params[:url], cuisine_name: cuisine_name, originator: originator, how_many: how_many)
@recipe.update_attribute(recipe_url: params[:url], cuisine_name: cuisine_name, originator: originator, how_many: how_many)
@recipe
@recipe.update_attribtues(recipe_url: params[:url], cuisine_name: cuisine_name, originator: originator, how_many: how_many)
@recipe = Recipe.find_or_initialize_by(recipe_url: params[:url]) 
@recipe
@recipe.update_attribtues(recipe_url: params[:url], cuisine_name: cuisine_name, originator: originator, how_many: how_many)
@recipe.assign_attributes(recipe_url: params[:url], cuisine_name: cuisine_name, originator: originator, how_many: how_many)
@recipe
@recipe.save
Recipe.all
@recipe = Recipe.find_or_initialize_by(recipe_url: params[:url]) 
@recipe.new_record?
@recipe.assign_attributes(recipe_url: params[:url], cuisine_name: cuisine_name, originator: originator, how_many: how_many)
@recipe
@recipe.save
exit
FoodCost.all
exit
synonym
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_f
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit })
exit
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.quantity_unit, food_costs.cost, food_costs.note")
@food_costs
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.quantity_unit, food_costs.cost, food_costs.note").order(food_cost_id: :asc)
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).order(food_cost_id: :asc).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.quantity_unit, food_costs.cost, food_costs.note")
@food_costs = FoodCost.order(food_cost_id: :asc).where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.quantity_unit, food_costs.cost, food_costs.note")
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.id, food_costs.quantity_unit, food_costs.cost, food_costs.note").order(food_costs.id: :asc)
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.id, food_costs.quantity_unit, food_costs.cost, food_costs.note").order("food_costs id")
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.id, food_costs.quantity_unit, food_costs.cost, food_costs.note")
@food_costs
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.id, food_costs.quantity_unit, food_costs.cost, food_costs.note").order(id)
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.id, food_costs.quantity_unit, food_costs.cost, food_costs.note").order(food_cost.id)
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.id, food_costs.quantity_unit, food_costs.cost, food_costs.note")
@food_costs
@food_costs.order(id)
@food_costs.order(id: :asc)
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.quantity_unit, food_costs.cost, food_costs.note").order(id: :asc)
@food_costs
@food_costs = FoodCost.where(recipe_id: params[:id]).joins(price: :ingredient).select("ingredients.name, prices.purchase_price, prices.quantity, prices.unit_id, food_costs.id, food_costs.quantity_unit, food_costs.cost, food_costs.note").order(id: :asc)
@food_costs
exit
exit
@food_costs
exit
Recipe.find(10)
@recipe = Recipe.find(10)
@recipe.destroy
exit
@food_costs
exit
exit
Ingredient.find_by(name: '白菜')
Price.where(ingredient: 92)
exit
Recipe.where(ingredient: 92)
Recipe.where(ingredient_id: 92)
Price.where(ingredient_id: 92)
a = 0.5
a
a.multiple_of(1)
a.multiple_of?(1)
a = 1.0
a.integer?
exit
@food_costs
@food_costs
@food_costs.where(id: 120)
@food_costs.where(id: 120).cost
exit
a = 1.0
a % 1
a = 1.5
a % 1
a = 1
a % 1
a % 1 == 0
a = 1.5
a % 1 == 0
a = 1.0
a % 1 == 0
exit
exit
exit
@food_costs.find(120)
@food_costs.find(120).cost
exit
cost
amount
Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price
Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price.round(4)
exit
exit
amount
Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price
Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price
Price.find(90)
exit
exit
cost
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_f
amount
Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price
Price.find_by(90)
Price.find_by(ingredient_id: 90)
Price.find_by(ingredient_id: 92)
exit
(price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
(price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(1)
price[2]
price[3]
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
267/(0.5*2000)
price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[3].to_i
price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2].to_i
price[3].to_i 
price[3]
exit
cost
Price.find(90)
exit
Price.find(90)
exit
price[2].to_f
price[2]
(price[2].to_i / (price[3].to_f * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
exit
rails c
rails c
exit
Price.find(90)
exit
exit
cost
exit
exit
food_cost.purchase_price
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
food_cost.name
exit
food_cost.name
exit
food_cost.name
exit
food_cost.name
food_cost.quantity.to_i
food_cost.quantity
food_cost.purchase_price % 1 == 0
food_cost.quantity % 1 == 0
exit
exit
exit
exit
exit
exit
exit
synonym
@recipe_id = Recipe.find_by(recipe_url: params[:url]).id
FoodCost.find_by(recipe_id: 8)
synonym
!(/[0-9.]+/.match(quantity_unit))
/([大小]+[さじ]*[匙]*)([0-9.\/]*)[~〜]*[0-9.\/]*/.match(quantity_unit)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房玉つ人食a-z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|]*)/.match(quantity_unit)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこケ缶片袋杯膳束合枚鞘房玉つ人食切匹尾ケ丁a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|]*)/.match(quantity_unit)
exit
synonym
exit
synonym
exit
synonym
exit
exit
exit
exit
exit
exit
exit
exit
exit
Synonym.find_by(name: synonym)
@food_cost = FoodCost.create(recipe_id: @recipe_id, quantity_unit: quantity_unit, cost: 0, price_id: 100000, note:synonym)
@food_cost = FoodCost.create(recipe_id: @recipe_id, quantity_unit: quantity_unit, cost: 0, price_id: 100000, note:synonym)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
synonym 
@food_cost = FoodCost.create(recipe_id: @recipe_id, quantity_unit: quantity_unit, cost: 0, price_id: 100000, note:synonym)
FoodCost.find_by(recipe_id: 8)
exit
exit
exit
exit
exit
exit
exit
exit
exit
FoodCost.count
FoodCost.find_by(price_id: 100000).count
FoodCost.find_by(price_id: 100000)
FoodCost.all
FoodCost.find_by(price_id: 100000)
FoodCost.all
FoodCost.where(price_id: 100000)
FoodCost.count
exit
