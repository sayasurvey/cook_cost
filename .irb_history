target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[0]
Ingredient.find_by(name: price[1])
price[2]
price[3].to_f
Unit.find_by(unit: price[4])
(price[2].to_i / (price[3].to_f * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
IngredientUnit.includes(:ingredient, :unit)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] })
price[4]
exit
exit
exit
exit
exit
exit
(price[2].to_i / (price[3].to_f * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
price[4]
price[1]
exit
exit
exit
synonym
exit
synonym
exit
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)
node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)[1]
synonym
synonym = node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)[1]
synonym
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
Synonym.find_by(name: synonym)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
!(/[0-9.]+/.match(quantity_unit))
/([大小]+[さじ]*[匙]*)([0-9.\/]*)[~〜]*[0-9.\/]*/.match(quantity_unit)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] = ""
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] = ""
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2]
"" = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2]
"" = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] ==  ""
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] == ""
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit = quantity_unit.match(/[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit
quantity_unit = quantity_unit.match(/[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/[.]*[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit.match(/[.]*[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit
quantity_unit.match(/[.]*[\(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[\)]+)/)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit.match(/(.*?)/)
quantity_unit.match(/（.*?）/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit.match(/[\(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)[\)]+/)
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/[\(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)[\)]+/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit
synonym
exit
synonym
exit
synonym
synonym
exit
synonym
exit
synonym
exit
synonym
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
Recipe.find_by(price_id: 100000)
FoodCost.find_by(price_id: 100000)
FoodCost.where(price_id: 100000)
exit
FoodCost.where(price_id: 100000)
git diff
exit
Price.includes(:ingredient).where(ingredient { name: 'ごはん' }).select(ingredient.name, price.one_base_unit_price)
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select(ingredient.name, price.one_base_unit_price)
Price.includes(:ingredients).where(ingredient: { name: 'ごはん' }).select("ingredient.name, price.one_base_unit_price)
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' })
Price.includes(:ingredients).where(ingredient: { name: 'ごはん' }).select("ingredient.name, price.one_base_unit_price")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name, price.one_base_unit_price")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name, prices.one_base_unit_price")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' })
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredients.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredients.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select(*)
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredients.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' })
exit
fill_in 'url', with: 'https://recipe.rakuten.co.jp/recipe/1190004346/'
exit
find('.url_btn')
find(".url_btn")
find(".url")
find(".text-gray.url-btn")
find(".url-btn")
find('.url-btn')
exit
expect(current_path).to eq('/recipes/1')
current_path
FoodCost.all
Recipe.all
exit
Synonym.find_by(name: synonym)
synonym
Synonym.all
Synonym.find_by(name: synonym)
exit
current_path
expect(current_path).to eq(show_recipe_path)
Recipe.all
expect(current_path).to eq(show_recipe_path(recipe))
show_recipe_path(recipe)
rails routes
expect(current_path).to eq(recipe_path)
current_path
recipe_path
recipes_path
recipe_path(recipe)
recipe_path(6)
FoodCost.all
exit
FoodCost.all
exit
synonym == ""
 quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
exit
 quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
synonym
exit
synonym
exit
synonym
synonym == ""
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
exit
synonym = node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)[1]
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit[2] == ""
quantity_unit[2]
quantity_unit
uantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] == ""
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] == ""
quantity_unit = quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit
quantity_unit == ""
quantity_unit == nil
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_AFTER.match(quantity_unit)
Constants::UNIT_AFTER
"/#{Constants::UNIT_AFTER}/".match(quantity_unit)
"/#{Constants::UNIT_AFTER}/"
exit
exit
node
quantity_unit
recipe_id
synonym
exit
synonym = node.css('.recipe_material__item_name').text.strip.match(Constants::JAPANESE_ONLY)[1]
exit
exit
quantity_unit
quantity_unit == nil
exit
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_AFTER.match(quantity_unit)
exit
unit
quantity_unit
a
[a1, a2, a3] = a
a1, a2, a3 = a
a1
a2
a3
quantity_unit
quantity
unit
exit
Recipe.destroy_all
exit
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip
Recipe.url
Recipe.all
Recipe.all
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+([0-9]{10}\/)+\Z/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+([0-9]{10}\/)+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match('https://recipe.rakuten.co.jp/recipe/')
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}\/)+\Z/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}\/)+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10})+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9/]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}/)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}\/)/)
exit
Recipe.all
exit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
Synonym.find_by(name: synonym)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_CAP.match(quantity_unit)
quantity_unit = quantity_unit.match(Constants::UNIT_SPOON)
quantity_unit = quantity_unit.match(Constants::UNIT_CAP)
exit
exit
Recipe.all
Ingredient.find_by(name: '豚肉')
IngredientUnit.find_by(name: '豚肉')
IngredientUnit.includes(:ingredient).find_by(name: '豚肉')
IngredientUnit.includes(:ingredients).find_by(name: '豚肉')
IngredientUnit.includes(:ingredients).find_by(ingredient: { name: '豚肉' })
IngredientUnit.includes(:ingredients).find_by(ingredients: { name: '豚肉' })
IngredientUnit.includes(:ingredients)
IngredientUnit.includes(:ingredient)
IngredientUnit.includes(:ingredient).where(ingredient: { name: '豚肉' } )
Price.includes(:ingredient).where(ingredient: { name: '豚肉' } )
Price.includes(:ingredient).where(ingredient: { name: 'キャベツ' } )
Price.includes(:ingredient).where(ingredient: { name: 'ピーマン' } )
Price.includes(:ingredient).where(ingredient: { name: 'ネギ' } )
Price.includes(:ingredient).where(ingredient: { name: 'にんにく' } )
Price.includes(:ingredient).where(ingredient: { name: 'しょうが' } )
Price.includes(:ingredient).where(ingredient: { name: '味噌' } )
Price.includes(:ingredient).where(ingredient: { name: 'ごま油' } )
Price.includes(:ingredient).where(ingredient: { name: '豆板醤' } )
Recipe.all
Price.includes(:ingredient).where(ingredient: { name: '塩' } )
Price.includes(:ingredient).where(ingredient: { name: '片栗粉' } )
Price.includes(:ingredient).where(ingredient: { name: '鶏がらスープの素' } )
Price.includes(:ingredient).where(ingredient: { name: 'こしょう' } )
Price.includes(:ingredient).where(ingredient: { name: 'いりごま' } )
Price.includes(:ingredient).where(ingredient: { name: 'ごま油' } )
exit
recipe_id
FoodCost.where(recipe_id: 14)
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_CAP.match(quantity_unit)
Constants::UNIT_AFTER.match(quantity_unit)
quantity_unit.match(Constants::UNIT_AFTER)[2] == ""
quantity_unit = quantity_unit.match(Constants::UNIT_AFTER_PARENTHESES)
quantity_unit == nil
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
@food_cost = FoodCost.create(recipe_id: recipe_id, quantity_unit: quantity_unit, cost: 0, price_id: 100000, note:synonym)
FoodCost.where(recipe_id: 14)
return quantity_unit
synonym
exit
synonym
exit
synonym
FoodCost.where(recipe_id: 14)
quantity_unit
synonym
exit
synonym
quantity_unit
quantity
unit
FoodCost.where(recipe_id: 14)
exit
params
exit
params
exit
exit
exit
i
params
exit
exit
Price.all
exit
full_pattern
csv
klass
csv.each do |row|\
  model.seed(:id) do |m|\
    m\
    csv.headers.each { |h| eval("m.#{h} = #{row[h].inspect}") }\
  end\
end
exit
s.id  = child_categories[0]
s.category = Category.find_by(name: child_categories[1])
s.name = child_categories[2]
s.rakuten_id = child_categories[3]
exit
@category = ChildCategory.includes(:categories)
@category = ChildCategory.includes(:categorie)
@category = ChildCategory.all
@category = ChildCategory.include(:category)
@category = ChildCategory.includes(:category)
@category = ChildCategory.includes(:category).where(category: { id : params[:id] })
@category = ChildCategory.includes(:category).find_by(category: { id : params[:id] })
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] })
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name as child_category_name, child_category.rakuten_id as child_category_rakuten_id")
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id")
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name")
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name as child_category_name")
@category = ChildCategory.includes(:category).where(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name as child_category_name")

@category = Category.find(params[:id])
@category
@child_category = ChildCategory.find_by(category_id: params[:id])
@child_category
ChildCategory.all
ChildCategory.find_by(category_id: params[:id])
ChildCategory.where(category_id: params[:id])
@child_categories = ChildCategory.where(category_id: params[:id])
@child_category
@child_categories
exit
data
data.match(/[|](*)[|](*)[|](*)[|](*)[|](*)[|](*)[|](*)[|](*)[|]/)
data.match(/[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+/)
data.match(/[|]+(*)+[|]+)\
  /)
data.match(/[|]+(*)+[|]+/)
data.match(/|(*)|(*)|(*)|(*)|(*)||(*)|(*)|(*)|/)
data.match(/|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)||([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|/)
data.match(/|([一-龠ぁ-んァ-ヶ・ーｦ-]*)/)
data.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶ・ーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/
data.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶ・ーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)
exit
data[0].match(/|/)
data[0].match(/[|]+/)
data = data[0].split('|')
data
data = data.join(',')
exit
FoodCost.where(ingredient_id: 100000)
FoodCost.joins(:price).where(price: {ingredient_id: 100000})
ruby lib/conversions.rb
exit
FoodCost.all
exit
page.all('.category-btn')
page.all('.category-btn')[0].click
page.all('.link-btn')[0]
page.all('.link-btn')[0].click
expect(page).to have_content('https://recipe.rakuten.co.jp/recipe/1590002716/')
exit
exit
exit
User.all
exit
ENV['TWITTER_KEY']
ENV['TWITTER_SECRET']
ENV['FACEBOOK_KEY']
ENV['FACEBOOK_SECRET']
exit
User.all
User.all
Authentications.all
Authentications.all
exit
User.first.destroy
User.all
exit
User.all
exit
User.all
User.first.destroy
User.all
User.first.destroy
User.destroy_all
User.first
@user = User.first
@user
@user.destroy
exit
User.all
User.first.destroy
exit
User.first.destroy
User.all
exit
User.all
User.all
provider
@user_hash
exit
@user_hash
exit
User.all
exit
Recipe.find_or_initialize_by(recipe_url: params[:url])
@recipe = Recipe.find_or_initialize_by(recipe_url: params[:url])
@recipe
@recipe.assign_attributes(recipe_url: params[:url], cuisine_name: cuisine_name, originator: originator, how_many: how_many)
@recipe
@recipe.save
@recipe
"https://recipe.rakuten.co.jp/recipe/1070040366/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}\/)/)
@recipe.save
exit
user
exit
current_user.id
exit
@recipe = Recipe.find(params[:recipe_id])
@recipe
@bookmark = @recipe.bookmarks.new(user_id: current_user.id)
@bookmark
@bookmark.save
exit
Bookmarks.all
Bookmark.all
User.all
@recipe = current_user.bookmarks.includes(:user).order(created_at: :desc)
@recipe
exit
exit
exit
@recipe = current_user.bookmarks.includes(:user).order(created_at: :desc)
exit
exit
exit
exit
exit
eit
eit
@recipe = current_user.bookmark_recipes.order(created_at: :desc)
@recipe
exit
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip.match(/(.)*レシピ・作り方/)
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip.match(/.*レシピ・作り方/)
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip.match(/(.)+レシピ・作り方/)
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip.match(/(.)+[レシピ・作り方]+/)
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip.match(/(.)*[レシピ・作り方]+/)
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip
cuisine_name = cuisine_name - " レシピ・作り方"
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip
cuisine_name.match(/(?<= レシピ・作り方)(.*)/)
/ レシピ・作り方/.match(cuisine_name)
cuisine_name.match(/(.*) レシピ・作り方/)
doc.xpath("#{html_path}div[2]").text.strip.match(/(.*) レシピ・作り方/)
doc.xpath("#{html_path}div[2]").text.strip.match(/(.*) レシピ・作り方/)[1]
exit
Resipe.first
Recipe.first
exit
recipe_food_cost = current_user.bookmark_recipes.includes(:food_cost).select("bookmark_recipes.recipe_url, food_cost.cost").order(created_at: :desc)
current_user.bookmark_recipes.includes(:food_cost)
current_user.bookmark_recipes.includes(:food_cost)
current_user.bookmark_recipes
current_user.bookmark_recipes.includes(:food_cost)
current_user.bookmark_recipes.includes(:food_costs)
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.recipe_url, food_costs.cost")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.recipe_url, food_cost.cost")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.recipe_url")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.recipe_url")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.recipe_url, food_costs.cost")
current_user.bookmark_recipes.includes(:food_costs).select(" food_costs.cost")
current_user.bookmark_recipes.includes(:food_costs).select(*)
current_user.bookmark_recipes.includes(:food_costs).where(recipe_id: 2)
exit
exit
exit
FoodCosts.where(recipe_id: recipe.id).group(recipe.id).sum
FoodCosts.where(recipe_id: recipe.id).group(recipe.id)
FoodCosts.where(recipe_id: recipe.id)
recipe.id
FoodCosts.first
FoodCost.where(recipe_id: recipe.id)
FoodCost.where(recipe_id: recipe.id).sum
FoodCost.where(recipe_id: recipe.id).sum(:cost)
recipe.cost = FoodCost.where(recipe_id: recipe.id).sum(:cost)
recipe.class
@recipe.class
@recipes.class
@recipes.first_or_create do |recipe|\
  recipe.cost = FoodCost.where(recipe_id: recipe.id).sum(:cost)\
end
@recipes
@recipe.first.cost
current_user.bookmark_recipes.includes(:cookcost)
current_user.bookmark_recipes.includes(:cook_costs)
current_user.bookmark_recipes.includes(:cook_cost)
current_user.bookmark_recipes.includes(:cook_costs)
current_user.bookmark_recipes.includes(recipes: :cook_costs)
current_user.bookmark_recipes.includes(recipes:)
current_user.bookmark_recipes.includes(recipe:)
current_user.bookmark_recipes.includes(:recipe)
current_user.bookmark_recipes.includes(:recipes)
current_user.bookmark_recipes.include(:recipe)
current_user.bookmark_recipes.includes(:recipe)
current_user.bookmark_recipes.includes(:recipes)
current_user.bookmark_recipes.includes(recipes:)
current_user.bookmark_recipes.include(recipes:)
current_user.bookmark_recipes.include(recipes)
current_user.bookmark_recipes.includes(recipes)
@recipe.class
@recipes.class
@food_costs += FoodCost.where(recipe_id: recipe.id).sum(:cost).to_a
FoodCost.where(recipe_id: recipe.id).sum(:cost).to_a
FoodCost.where(recipe_id: recipe.id).sum(:cost)
@food_costs += FoodCost.where(recipe_id: recipe.id).sum(:cost)
@food_costs << FoodCost.where(recipe_id: recipe.id).sum(:cost)
@food_costs = FoodCost.where(recipe_id: recipe.id).sum(:cost)
current_user.bookmark_recipes.includes(:food_costs)
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.recipe_url, sum(food_costs.cost) as recipe")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.originator, sum(food_costs.cost) as recipe")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.originator, food_costs.cost")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipe.originator, food_cost.cost")
current_user.bookmark_recipes.includes(:food_costs).select(*)
current_user.bookmark_recipes.includes(:food_costs)
current_user.bookmark_recipes.includes(:food_costs).select("food_cost.cost")
FoodCost.all
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipe.originator")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipe.recipe_url")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipe.id, food_cost.id")
current_user.bookmark_recipes.includes(:food_costs).where(recipe_id: recipe.id).select("bookmark_recipe.id, food_cost.id")
current_user.bookmark_recipes.includes(:food_costs).where(recipe_id: recipe.id)
current_user.bookmark_recipes.includes(:food_costs).where(recipe_id: 2)
current_user.bookmark_recipes.includes(:food_costs)
current_user.bookmark_recipes.includes(:food_costs).where(id: 2)
current_user.bookmark_recipes.includes(:food_costs).where(food_cost.cost)
current_user.bookmark_recipes.includes(:food_costs).where(food_costs.cost)
current_user.bookmark_recipes.includes(:food_costs).where(food_cost.price_id)
current_user.bookmark_recipes.includes(:food_costs).where(bookmark_recipes: 2)
current_user.bookmark_recipes.includes(:food_costs).where(bookmark_recipe: 2)
current_user.bookmark_recipes.includes(:food_costs).where(bookmark_recipe_id: 2)
current_user.bookmark_recipes.includes(:food_costs).where(bookmark_recipe_id: 1)
current_user.bookmark_recipes.includes(:food_costs).where(recipe_id: 1)
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipes.recipe_url")
current_user.bookmark_recipes.includes(:food_costs).select("bookmark_recipe.recipe_url")
current_user.bookmark_recipes.includes(:food_costs).select("food_cost.id")
exit
exit
exit
@recipes = Recipe.includes(:food_cost)
Recipe.includes(:food_cost)
Recipe.includes(:food_costs)
Recipe.includes(:food_costs).select("recipe.recipe_url, food_cost.cost")
Recipe.includes(:food_costs).select("recipe.recipe_url, sum(food_cost.cost)")
Recipe.includes(:food_costs).select("recipes.recipe_url, sum(foods_cost.cost)")
Recipe.includes(:food_costs).select("recipe.recipe_url, sum(food_cost.cost)").group(recipe.id)
Recipe.includes(:food_costs).select("recipe.recipe_url")
Recipe.includes(:food_costs).group(:recipe.id)
Recipe.select("recipe.recipe_id, food_cost.id").includes(:food_costs).group(:recipe.id)
Recipe.select("recipe.recipe_id, food_cost.id").includes(:food_costs)
Recipe.select("recipe.recipe_id, sum(food_cost.cost)").includes(:food_costs)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).group(:recipe_id)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).where(recipe: {id: 2}).group(:recipe_id)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).where(recipe: {id: 2})
Recipe.select("recipe.id, sum(food_cost.cost) as sum").includes(:food_costs).where(recipe: {id: 2})
Recipe.select("recipe.id, sum(food_cost.cost) as sum").includes(:food_cost).where(recipe: {id: 2})
Recipe.select("recipe.id, sum(food_cost.cost) as sum").includes(:food_costs).where(recipe: {id: 2})
Recipe.select("recipe.id, sum(food_cost.cost) as sum")
Recipe.select("recipe.id")
Recipe.select("recipes.id")
Recipe.select("recipes.id sum(food_costs.cost) as cook_cost")
Recipe.select("recipes.id sum(food_costs.cost) as cook_cost").joins(:food_costs)
Recipe.select("recipes.id sum(food_costs.cost) as cook_cost").joins(:food_costs).where(recipes: {id: 2})
Recipe.select("recipes.id").where(recipes: {id: 2})
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(recipe.recipe_id)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(recipe_id)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(recipe.id)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(recipe.recipe.id)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(:recipe_id)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(:recipe_id)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(recipe.id)
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs).group(:recipe_id)
Recipe.select("recipes.id, sum(food_costs.cost)").where(recipes: {id: 2}).includes(:food_costs).group(:recipe_id)
Recipe.select("recipes.id, sum(food_costs.cost)").where(recipes: {id: 2}).includes(:food_costs)
Recipe.select("recipes.id, sum(food_costs.cost)").where(recipes: {id: 2})
Recipe.select("recipes.id").where(recipes: {id: 2})
Recipe.select("recipes.id").where(recipes: {id: 2}).includes(:food_costs)
Recipe.select("recipes.id, sum(food_cost.cost)").where(recipes: {id: 2}).includes(:food_costs)
Recipe.select("recipes.id, sum(food_cost.cost) as cost").where(recipes: {id: 2}).includes(:food_costs)
Recipe.select("recipes.id, sum(food_cost.cost) as cost").joins(food_costs:)
Recipe.select("recipes.id").joins(food_costs:)
Recipe.select("recipes.id").joins(food_cost:)
Recipe.select("recipes.id").includes(food_cost:)
Recipe.select("recipes.id").includes(:food_costs)
Recipe.select("recipes.id").includes(food_costs:)
Recipe.select("recipes.id").includes(food_cost:)
Recipe.select("recipes.id").includes(food_cost:).where(recipe: { id: 2 }).group(:recipe_id)
Recipe.select("recipes.id, sum(food_cost.cost)").includes(food_cost:).where(recipe: { id: 2 }).group(:recipe_id)
Recipe.select("recipe.recipes_id, sum(food_cost.cost)").includes(food_cost:).where(recipe: { id: 2 }).group(:recipe_id)
Recipe.select("recipe.recipe_id, sum(food_cost.cost)").includes(food_cost:).where(recipe: { id: 2 }).group(:recipe_id)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).where(recipe: { id: 2 }).group(:recipe_id)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).where(recipe: { id: 2 })
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).where(recipe: { id: 2 })
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).where(recipe_id: 1)
Recipe.select("recipe.id, sum(food_cost.cost)").includes(:food_costs).where(recipe: {id: 1})
Recipe.select("recipe.id, sum(food_cost.cost)").includes(food_costs:).where(recipe: {id: 1})
Recipe.select("recipe.id, sum(food_cost.cost)").includes(food_cost:).where(recipe: {id: 1})
Recipe.select("recipe.id, sum(food_cost.cost)").includes(food_cost:).where(recipe: {id: 1}).group("recipe.id")
Recipe.select("recipe.id, sum(food_cost.cost)").includes(food_costs:).where(recipe: {id: 1}).group("recipe.id")
Recipe.select("recipe.recipe_id, sum(food_cost.cost)").includes(food_cost:).where(recipe: { id: 2 }).group(:recipe_id)
Recipe.select("recipe.recipe_id, sum(food_cost.cost)").includes(food_cost:).where(recipe: { id: 2 }).group(:recipe_id)
Recipe.select("recipe.*, sum(food_cost.cost)").includes(:food_costs).where(recipe: {id: 1})
Recipe.select("recipe.*, sum(food_cost.cost)").includes(:food_costs)
Recipe.left_joins(:food_cost)
Recipe.left_joins(:food_costs)
Recipe.left_joins(:food_costs).where(recipe: {id: 2})
Recipe.left_joins(:food_costs).where(recipes: {id: 2})
Recipe.left_joins(:food_costs).where(recipes: {id: 2}).group(recipes: {id: 2})
Recipe.left_joins(:food_costs)..group(:recipes_id)
Recipe.left_joins(:food_costs)..group(:recipe_id)
Recipe.left_joins(:food_costs).group(:recipe_id)
Recipe.left_joins(:food_costs).select("recipe.*, sum(food_costs.cost)").group(:recipe_id)
Recipe.left_joins(:food_costs).select("recipe.*, sum(food_costs.cost)")
Recipe.left_joins(:food_costs).select("recipe.*, sum(food_cost.cost)")
Recipe.left_joins(:food_costs).select("recipe.*")
Recipe.left_joins(:food_costs)
exit
Recipe.find_by_sql("SELECT r.*, sum(f.cost) as food_cost FROM recipes as r LEFT OUTER JOIN food_costs as f ON r.id = f.recipe_id GROUP BY r.id")
exit
exit
exit
@recipes = @recipes.page(params[:page])
@recipes
exit
@recipes = @recipes.page(params[:page])
@recipes
exit
exit
exit
exit
exit
Recipe.all
q
exit
Recipe.left_outer_joins(:food_costs).group("recipes.id").select("recipes.*, sum(food_costs.cost)").order("recipes.created_at DESC")
@recipes = Recipe.left_outer_joins(:food_costs).group("recipes.id").select("recipes.*, sum(food_costs.cost)").order("recipes.created_at DESC")
@recipes = Recipe.left_outer_joins(:food_costs).group("recipes.id").select("recipes.*, sum(food_costs.cost) as cook_cost").order("recipes.created_at DESC")
@recipes.first.cook_cost
exit
exit
exit
exit
exit
exit
exit
Recipe.left_outer_joins(:food_costs)\
                     .group("recipes.id")\
                     .select("recipes.*, sum(food_costs.cost) as cook_cost")\
                     .order("recipes.created_at DESC")\
                     .ransack(params[:q])
Recipe.left_outer_joins(:food_costs).group("recipes.id").select("recipes.*, sum(food_costs.cost) as cook_cost").order("recipes.created_at DESC")
Recipe.left_outer_joins(:food_costs).select("recipes.*, sum(food_costs.cost) as cook_cost").order("recipes.created_at DESC")
Recipe.left_outer_joins(:food_costs).select("recipes.*, sum(food_costs.cost) as cook_cost")
Recipe.left_outer_joins(:food_costs).group("recipes.id").select("recipes.*, sum(food_costs.cost) as cook_cost").order("recipes.created_at DESC")
Recipe.left_outer_joins(:food_costs).group("recipes.id").select("recipes.*").order("recipes.created_at DESC")
Recipe.left_outer_joins(:food_costs).select("recipes.*")
exit
exit
exit
exit
exit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
Synonym.find_by(name: synonym)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
quantity_unit, quantity, unit = regular_expression(node, quantity_unit, recipe_id, synonym)
quantity_unit
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_CAP.match(quantity_unit)
Constants::UNIT_AFTER.match(quantity_unit)
quantity_unit.match(Constants::UNIT_AFTER)[2] == ""
quantity_unit.match(Constants::UNIT_AFTER_PARENTHESES)
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱周a-zA-Zℊｇ|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|㎝|]*)\)/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱周a-zA-Zℊｇ|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|㎝|]*)\)/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*/)
quantity_unit.match(/\(([0-9.\/]+)[~～〜]*[0-9.\/]*/)
quantity_unit.match(/\(([0-9.\/]+)[〜]*[0-9.\/]*/)
quantity_unit.match(/\(([0-9.\/]+)[〜]*/)
quantity_unit.match(/\(([0-9.\/]+)/)
quantity_unit
quantity_unit.match(/[0-9.\/]+/)
quantity_unit.match(/([0-9.\/]+)/)
quantity_unit.match(/([0-9.\/]+)[~〜]*/)
quantity_unit.match(/([0-9.\/]+)[~〜]*[0-9.\/]+/)
quantity_unit.match(/([0-9.\/]+)[~〜]*[0-9.\/]+([g])/)
quantity_unit = quantity_unit.match(Constants::UNIT_AFTER_PARENTHESES)
quantity_unit, quantity, unit = regular_expression(node, quantity_unit, recipe_id, synonym)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([g]+)/\
end
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([g]+)/)
quantity_unit.match(Constants::UNIT_AFTER_PARENTHESES)
quantity_unit.match(/([0-9.\/]+)[~～]+[0-9.\/]*([g]+)/)
quantity_unit
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱周a-zA-Zℊｇ|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|㎝|]*)\)/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([g]+)\)/)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([g]+)/)
quantity_unit.match(/([0-9.\/]+)[~～]+[0-9.\/]*([g]+)/)
quantity_unit.match(/[~～]+/)
quantity_unit.match(/[~～]*/)
quantity_unit
quantity_unit.match(/[〜]*/)
quantity_unit.match(/([〜]*)/)
quantity_unit.match(/(〜*)/)
quantity_unit.match(/(*)/)
quantity_unit.match(/(.*)/)
quantity_unit.match(/(~*)/)
quantity_unit.match(/(〜*)/)
quantity_unit.match(/(\〜*)/)
quantity_unit.match(/(〜)*/)
quantity_unit.match((〜)*)
quantity_unit.match(/(〜)*/)
quantity_unit.encoding
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([g]+)/)
quantity_unit.match(/([0-9.\/〜]+)[0-9.\/]*([g]+)/)
quantity_unit.match(/([0-9.\/]+)[0-9.\/]*([g]+)/)
quantity_unit.match(/([0-9.\/]+)[~～]+[0-9.\/]+([g]+)/)
quantity_unit.match(/([0-9.\/]+)[~～]+[0-9.\/]+/)
quantity_unit.match(/([0-9.\/]+)[~～]+/)
quantity_unit.match(/([0-9.\/]+)/)
quantity_unit.match(/([0-9.\/]+[〜]+)/)
quantity_unit.match(/([0-9.\/]+)[〜]+/)
quantity_unit.match(/([0-9.\/]+)[〜]+[0-9.\/]+/)
quantity_unit.match(/([0-9.\/]+)([〜]+)[0-9.\/]+/)
quantity_unit.match(/([0-9.\/]+)[〜]+[0-9.\/]+/)
quantity_unit.match(/([0-9.\/]+)[〜]+[0-9.\/]+[g]+/)
quantity_unit.match(/([0-9.\/]+)[〜]+[0-9.\/]+([g]+)/)
Constants::UNIT_AFTER.match(quantity_unit)
quantity_unit.match(Constants::UNIT_AFTER_PARENTHESES)
quantity_unit.match(Constants::UNIT_AFTER_PARENTHESES)
exit
synonym
synonym.split("・")
synonym = 'しょうが'
synonym = synonym.split("・")
synonym.class
exit
@recipe = Recipe.find_by(recipe_url: params[:url])
@recipe
FoodCost.find_by(recipe_id: @recipe).sum(:cost)
FoodCost.find_by(recipe_id: @recipe)
FoodCost.where(recipe_id: @recipe).sum(:cost)
@recipe.cook_cost = FoodCost.where(recipe_id: @recipe).sum(:cost)
@recipe.how_many.match(/.*([0-9])+[人個こコ]+/)
@recipe.how_many.match(/.*([0-9])+[人個こコ]+/)[1]
how_many = @recipe.how_many.match(/.*([0-9])+[人個こコ]+/)[1]
@recipe.cook_cost / how_many
@recipe.cook_cost
@recipe.cook_cost / how_many.to_i
@recipe.one_meal_cost = @recipe.cook_cost / how_many.to_i
@recipe
(@recipe.cook_cost / how_many.to_i).round
(@recipe.cook_cost / how_many.to_i).round(0)
(@recipe.cook_cost / how_many.to_i).round(1)
(@recipe.cook_cost / how_many.to_i)
Recipes.all
Recipe.all
Recipe.all
exit
doc.xpath("#{html_path}div[3]/section/h2[@class='contents_title contents_title_mb']").text.strip
full_to_half(doc.xpath("#{html_path}div[3]/section/h2[@class='contents_title contents_title_mb']").text.strip)
full_to_half(doc.xpath("#{html_path}div[3]/section/h2[@class='contents_title contents_title_mb']").text.strip).match(/材料\((.*)\)/)
full_to_half(doc.xpath("#{html_path}div[3]/section/h2[@class='contents_title contents_title_mb']").text.strip).match(/材料\((.*)\)/)[1]
exit
Recipe.all
Recipe.all
exit
@recipes
exit
exit
recipe
exit
exit
exit
recipe.one_meal_cost
recipe.one_meal_cost == nil
!recipe.one_meal_cost == nil
exit
FoodCost.where(recipe_id: 18)
params[:id])
params[:id]
FoodCost.all
exit
exit
csv_data
exit
User.all
User.destroy_all
@user = User.all
@user = Users.all
@user = User.all
exit
User.all
@user = User.all
User.first.destroy_all
@user = User.first
User.all
User.find(1)
@user = User.find(1)
User.destroy
exit
get_json("https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient/#{ingredient}")
get_json("https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient/鶏もも肉")
get_json("https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient?food_name=#{ingredient}")
get_json("https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient/momo")
get_json("https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient/鶏もも肉")
Net::HTTP.post_form(URI.parse('https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient/'),{'food_name' => '鶏もも肉'})
post_form(URI.parse('https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient/'),{'food_name' => '鶏もも肉'})
exit
get_json("https://apex.oracle.com/pls/apex/foods/get_nutrient/ingredient/#{URI.encode_www_form_component('鶏もも肉')}")
#{URI.encode_www_form_component('鶏もも肉')}
URI.encode_www_form_component('鶏もも肉')
