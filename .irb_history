exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
target_url_array
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[0]
Ingredient.find_by(name: price[1])
price[2]
price[3].to_f
Unit.find_by(unit: price[4])
(price[2].to_i / (price[3].to_f * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
IngredientUnit.includes(:ingredient, :unit)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] })
price[4]
exit
exit
exit
exit
exit
exit
(price[2].to_i / (price[3].to_f * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)).round(4)
price[4]
price[1]
exit
exit
exit
synonym
exit
synonym
exit
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
exit
synonym
node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)
node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)[1]
synonym
synonym = node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)[1]
synonym
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
Synonym.find_by(name: synonym)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
!(/[0-9.]+/.match(quantity_unit))
/([大小]+[さじ]*[匙]*)([0-9.\/]*)[~〜]*[0-9.\/]*/.match(quantity_unit)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] = ""
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] = ""
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2]
"" = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2]
"" = quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] ==  ""
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] == ""
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit = quantity_unit.match(/[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit
quantity_unit = quantity_unit.match(/[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/[.]*[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit.match(/[.]*[(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[)]+)/)
quantity_unit
quantity_unit.match(/[.]*[\(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*[\)]+)/)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit.match(/(.*?)/)
quantity_unit.match(/（.*?）/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit.match(/[\(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)[\)]+/)
quantity_unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/[\(]+([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)[\)]+/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit
synonym
exit
synonym
exit
synonym
synonym
exit
synonym
exit
synonym
exit
synonym
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
Recipe.find_by(price_id: 100000)
FoodCost.find_by(price_id: 100000)
FoodCost.where(price_id: 100000)
exit
FoodCost.where(price_id: 100000)
git diff
exit
Price.includes(:ingredient).where(ingredient { name: 'ごはん' }).select(ingredient.name, price.one_base_unit_price)
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select(ingredient.name, price.one_base_unit_price)
Price.includes(:ingredients).where(ingredient: { name: 'ごはん' }).select("ingredient.name, price.one_base_unit_price)
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' })
Price.includes(:ingredients).where(ingredient: { name: 'ごはん' }).select("ingredient.name, price.one_base_unit_price")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name, price.one_base_unit_price")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name, prices.one_base_unit_price")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' })
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredients.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredients.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select(*)
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredients.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' }).select("ingredient.name")
Price.includes(:ingredient).where(ingredient: { name: 'ごはん' })
exit
fill_in 'url', with: 'https://recipe.rakuten.co.jp/recipe/1190004346/'
exit
find('.url_btn')
find(".url_btn")
find(".url")
find(".text-gray.url-btn")
find(".url-btn")
find('.url-btn')
exit
expect(current_path).to eq('/recipes/1')
current_path
FoodCost.all
Recipe.all
exit
Synonym.find_by(name: synonym)
synonym
Synonym.all
Synonym.find_by(name: synonym)
exit
current_path
expect(current_path).to eq(show_recipe_path)
Recipe.all
expect(current_path).to eq(show_recipe_path(recipe))
show_recipe_path(recipe)
rails routes
expect(current_path).to eq(recipe_path)
current_path
recipe_path
recipes_path
recipe_path(recipe)
recipe_path(6)
FoodCost.all
exit
FoodCost.all
exit
synonym == ""
 quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
exit
 quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
synonym
exit
synonym
exit
synonym
synonym == ""
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
exit
synonym = node.css('.recipe_material__item_name').text.strip.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)[1]
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
unit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit[2] == ""
quantity_unit[2]
quantity_unit
uantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] == ""
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/.match(quantity_unit)
quantity_unit.match(/([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)/)[2] == ""
quantity_unit = quantity_unit.match(/\(([0-9.\/]+)[~～]*[0-9.\/]*([個本コこヶ缶片袋杯膳束合枚鞘房握玉つ人食切匹尾株枚斤半玉ケ丁粒箱a-zA-Z|グラム|つかみ|つまみ｜ｸﾞﾗﾑ|カップ|パック|かけ|センチ|カケ|リットル|回し|まい|節|カット|]*)\)/)
quantity_unit
quantity_unit == ""
quantity_unit == nil
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_AFTER.match(quantity_unit)
Constants::UNIT_AFTER
"/#{Constants::UNIT_AFTER}/".match(quantity_unit)
"/#{Constants::UNIT_AFTER}/"
exit
exit
node
quantity_unit
recipe_id
synonym
exit
synonym = node.css('.recipe_material__item_name').text.strip.match(Constants::JAPANESE_ONLY)[1]
exit
exit
quantity_unit
quantity_unit == nil
exit
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_AFTER.match(quantity_unit)
exit
unit
quantity_unit
a
[a1, a2, a3] = a
a1, a2, a3 = a
a1
a2
a3
quantity_unit
quantity
unit
exit
Recipe.destroy_all
exit
cuisine_name = doc.xpath("#{html_path}div[2]").text.strip
Recipe.url
Recipe.all
Recipe.all
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+([0-9]{10}\/)+\Z/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+([0-9]{10}\/)+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match('https://recipe.rakuten.co.jp/recipe/')
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}\/)+\Z/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}\/)+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10})+/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9/]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/[https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}+)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}/)/)
"https://recipe.rakuten.co.jp/recipe/1550008949/".match(/([https:\/\/recipe.rakuten.co.jp\/recipe\/]+[0-9]{10}\/)/)
exit
Recipe.all
exit
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
Synonym.find_by(name: synonym)
ingredient = Ingredient.includes(:synonyms).find_by(synonyms: { name: synonym } ).name
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_CAP.match(quantity_unit)
quantity_unit = quantity_unit.match(Constants::UNIT_SPOON)
quantity_unit = quantity_unit.match(Constants::UNIT_CAP)
exit
exit
Recipe.all
Ingredient.find_by(name: '豚肉')
IngredientUnit.find_by(name: '豚肉')
IngredientUnit.includes(:ingredient).find_by(name: '豚肉')
IngredientUnit.includes(:ingredients).find_by(name: '豚肉')
IngredientUnit.includes(:ingredients).find_by(ingredient: { name: '豚肉' })
IngredientUnit.includes(:ingredients).find_by(ingredients: { name: '豚肉' })
IngredientUnit.includes(:ingredients)
IngredientUnit.includes(:ingredient)
IngredientUnit.includes(:ingredient).where(ingredient: { name: '豚肉' } )
Price.includes(:ingredient).where(ingredient: { name: '豚肉' } )
Price.includes(:ingredient).where(ingredient: { name: 'キャベツ' } )
Price.includes(:ingredient).where(ingredient: { name: 'ピーマン' } )
Price.includes(:ingredient).where(ingredient: { name: 'ネギ' } )
Price.includes(:ingredient).where(ingredient: { name: 'にんにく' } )
Price.includes(:ingredient).where(ingredient: { name: 'しょうが' } )
Price.includes(:ingredient).where(ingredient: { name: '味噌' } )
Price.includes(:ingredient).where(ingredient: { name: 'ごま油' } )
Price.includes(:ingredient).where(ingredient: { name: '豆板醤' } )
Recipe.all
Price.includes(:ingredient).where(ingredient: { name: '塩' } )
Price.includes(:ingredient).where(ingredient: { name: '片栗粉' } )
Price.includes(:ingredient).where(ingredient: { name: '鶏がらスープの素' } )
Price.includes(:ingredient).where(ingredient: { name: 'こしょう' } )
Price.includes(:ingredient).where(ingredient: { name: 'いりごま' } )
Price.includes(:ingredient).where(ingredient: { name: 'ごま油' } )
exit
recipe_id
FoodCost.where(recipe_id: 14)
!(/[0-9.]+/.match(quantity_unit))
Constants::UNIT_SPOON.match(quantity_unit)
Constants::UNIT_CAP.match(quantity_unit)
Constants::UNIT_AFTER.match(quantity_unit)
quantity_unit.match(Constants::UNIT_AFTER)[2] == ""
quantity_unit = quantity_unit.match(Constants::UNIT_AFTER_PARENTHESES)
quantity_unit == nil
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
@food_cost = FoodCost.create(recipe_id: recipe_id, quantity_unit: quantity_unit, cost: 0, price_id: 100000, note:synonym)
FoodCost.where(recipe_id: 14)
return quantity_unit
synonym
exit
synonym
exit
synonym
FoodCost.where(recipe_id: 14)
quantity_unit
synonym
exit
synonym
quantity_unit
quantity
unit
FoodCost.where(recipe_id: 14)
exit
params
exit
params
exit
exit
exit
i
params
exit
exit
Price.all
exit
full_pattern
csv
klass
csv.each do |row|\
  model.seed(:id) do |m|\
    m\
    csv.headers.each { |h| eval("m.#{h} = #{row[h].inspect}") }\
  end\
end
exit
s.id  = child_categories[0]
s.category = Category.find_by(name: child_categories[1])
s.name = child_categories[2]
s.rakuten_id = child_categories[3]
exit
@category = ChildCategory.includes(:categories)
@category = ChildCategory.includes(:categorie)
@category = ChildCategory.all
@category = ChildCategory.include(:category)
@category = ChildCategory.includes(:category)
@category = ChildCategory.includes(:category).where(category: { id : params[:id] })
@category = ChildCategory.includes(:category).find_by(category: { id : params[:id] })
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] })
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name as child_category_name, child_category.rakuten_id as child_category_rakuten_id")
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id")
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name")
@category = ChildCategory.includes(:category).find_by(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name as child_category_name")
@category = ChildCategory.includes(:category).where(category: { id: params[:id] }).select("category.name, category.rakuten_id, child_category.name as child_category_name")

@category = Category.find(params[:id])
@category
@child_category = ChildCategory.find_by(category_id: params[:id])
@child_category
ChildCategory.all
ChildCategory.find_by(category_id: params[:id])
ChildCategory.where(category_id: params[:id])
@child_categories = ChildCategory.where(category_id: params[:id])
@child_category
@child_categories
exit
data
data.match(/[|](*)[|](*)[|](*)[|](*)[|](*)[|](*)[|](*)[|](*)[|]/)
data.match(/[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+(*)+[|]+/)
data.match(/[|]+(*)+[|]+)\
  /)
data.match(/[|]+(*)+[|]+/)
data.match(/|(*)|(*)|(*)|(*)|(*)||(*)|(*)|(*)|/)
data.match(/|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)||([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|([一-龠ぁ-んァ-ヶ・ーｦ-]*)|/)
data.match(/|([一-龠ぁ-んァ-ヶ・ーｦ-]*)/)
data.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶ・ーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/
data.match(/[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*([一-龠ぁ-んァ-ヶ・ーｦ-]*)[^一-龠ぁ-んァ-ヶーｦ-ﾟ]*/)
exit
data[0].match(/|/)
data[0].match(/[|]+/)
data = data[0].split('|')
data
data = data.join(',')
exit
FoodCost.where(ingredient_id: 100000)
FoodCost.joins(:price).where(price: {ingredient_id: 100000})
ruby lib/conversions.rb
exit
FoodCost.all
exit
page.all('.category-btn')
page.all('.category-btn')[0].click
page.all('.link-btn')[0]
page.all('.link-btn')[0].click
expect(page).to have_content('https://recipe.rakuten.co.jp/recipe/1590002716/')
exit
exit
exit
User.all
exit
