amount = '大1.5'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大さじ1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = "大さじ1(15ml)"
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]+/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]¥Z/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '大1コ'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '中10コ~12コ'
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]*[0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]+([個本コこケ])+/)
amount = '中10~12コ'

amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]
amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~0-9]+/)
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]]+/)
amount = '10~11'
amount = amount.match(/(0-9)/)
amount = '10~11'
amount = amount.match(/(0-9)+/)
amount = '10~11'
amount = amount.match(/([0-9]+/)
amount = '10~11'
amount = amount.match(/([0-9]+)/)
amount = '10~11'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9+([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~11コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~2コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
exit
s.id  = ingredient_unit[0]
s.ingredient = Ingredient.find_by(name: ingredient_unit[1])
s.unit = Unit.find_by(unit: ingredient_unit[2])
exit
IngredientUnit.all
exit
IngredientUnit.all
exit
IngredientUnit.all
Ingredient.find_by(name: price[1])
Ingredient.all
price[2]
quantity
price[3]
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]}).ratio
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.includes(:unit).find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) })
IngredientUnits.find_by(ingredient_unit: { ingredient_id: 1 })
IngredientUnits.find_by(ingredient_unit: 1)
IngredientUnits.all
IngredientUnits.all
Units.all
exit
Synonyms.all
Synonym.all
Synonyms.all
exit
Ingredient.all
IngredientUnits.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: 1 , unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
Ingredient.find_by(name: 'ごはん')
Ingredient.all
Ingredient.all
Ingredients.all
Ingredient.all
exit
Ingredient.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] }))
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_i
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
IngredientUnit.includes(:ingredient, :unit)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[1]
price[4]
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })exit
exit
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2] / price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_f)
price[2] / price[3]
price[2].to_i / price[3].to_i
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
Price.all
exit
exit
exit
exit
target_url_array
exit
amount = "中1個"
amount_1 = "中1個"
exit
amount
/*[大中小]+[0-9]+[個本コこケ]/.match(amount)
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '小11コ'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = amount.match(/.*[0-9]+[個本コこケ]+/)
amount
amount = amount.match(/[0-9]+[個本コこケ]+/)
amount
amount[0]
amount[1]
amount = amount.match(/[大中小]*([0-9]+[個本コこケ]+)/)
amount = amount.match(/[大中小]*(.+)[個本コこケ]+/)
amount = amount.match(/小(.+)コ/)
amount
amount = "小11コ"
amount = amount.match(/小(.+)コ/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+)[個本コこケ]+/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '小11コ(500g)'
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '小11コ(500g)'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '大さじ1.5'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '大1.5'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大さじ1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = "大さじ1(15ml)"
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]+/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]¥Z/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '大1コ'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '中10コ~12コ'
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]*[0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]+([個本コこケ])+/)
amount = '中10~12コ'

amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]
amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~0-9]+/)
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]]+/)
amount = '10~11'
amount = amount.match(/(0-9)/)
amount = '10~11'
amount = amount.match(/(0-9)+/)
amount = '10~11'
amount = amount.match(/([0-9]+/)
amount = '10~11'
amount = amount.match(/([0-9]+)/)
amount = '10~11'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9+([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~11コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~2コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
exit
s.id  = ingredient_unit[0]
s.ingredient = Ingredient.find_by(name: ingredient_unit[1])
s.unit = Unit.find_by(unit: ingredient_unit[2])
exit
IngredientUnit.all
exit
IngredientUnit.all
exit
IngredientUnit.all
Ingredient.find_by(name: price[1])
Ingredient.all
price[2]
quantity
price[3]
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]}).ratio
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.includes(:unit).find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) })
IngredientUnits.find_by(ingredient_unit: { ingredient_id: 1 })
IngredientUnits.find_by(ingredient_unit: 1)
IngredientUnits.all
IngredientUnits.all
Units.all
exit
Synonyms.all
Synonym.all
Synonyms.all
exit
Ingredient.all
IngredientUnits.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: 1 , unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
Ingredient.find_by(name: 'ごはん')
Ingredient.all
Ingredient.all
Ingredients.all
Ingredient.all
exit
Ingredient.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] }))
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_i
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
IngredientUnit.includes(:ingredient, :unit)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[1]
price[4]
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })exit
exit
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2] / price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_f)
price[2] / price[3]
price[2].to_i / price[3].to_i
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
Price.all
exit
exit
exit
exit
target_url_array
exit
amount = "中1個"
amount_1 = "中1個"
exit
amount
/*[大中小]+[0-9]+[個本コこケ]/.match(amount)
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '小11コ'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = amount.match(/.*[0-9]+[個本コこケ]+/)
amount
amount = amount.match(/[0-9]+[個本コこケ]+/)
amount
amount[0]
amount[1]
amount = amount.match(/[大中小]*([0-9]+[個本コこケ]+)/)
amount = amount.match(/[大中小]*(.+)[個本コこケ]+/)
amount = amount.match(/小(.+)コ/)
amount
amount = "小11コ"
amount = amount.match(/小(.+)コ/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+)[個本コこケ]+/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '小11コ(500g)'
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '小11コ(500g)'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '大さじ1.5'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '大1.5'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大さじ1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = "大さじ1(15ml)"
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]+/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]¥Z/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '大1コ'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '中10コ~12コ'
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]*[0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]+([個本コこケ])+/)
amount = '中10~12コ'

amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]
amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~0-9]+/)
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]]+/)
amount = '10~11'
amount = amount.match(/(0-9)/)
amount = '10~11'
amount = amount.match(/(0-9)+/)
amount = '10~11'
amount = amount.match(/([0-9]+/)
amount = '10~11'
amount = amount.match(/([0-9]+)/)
amount = '10~11'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9+([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~11コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~2コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
exit
s.id  = ingredient_unit[0]
s.ingredient = Ingredient.find_by(name: ingredient_unit[1])
s.unit = Unit.find_by(unit: ingredient_unit[2])
exit
IngredientUnit.all
exit
IngredientUnit.all
exit
IngredientUnit.all
Ingredient.find_by(name: price[1])
Ingredient.all
price[2]
quantity
price[3]
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]}).ratio
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.includes(:unit).find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) })
IngredientUnits.find_by(ingredient_unit: { ingredient_id: 1 })
IngredientUnits.find_by(ingredient_unit: 1)
IngredientUnits.all
IngredientUnits.all
Units.all
exit
Synonyms.all
Synonym.all
Synonyms.all
exit
Ingredient.all
IngredientUnits.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: 1 , unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
Ingredient.find_by(name: 'ごはん')
Ingredient.all
Ingredient.all
Ingredients.all
Ingredient.all
exit
Ingredient.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] }))
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_i
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
IngredientUnit.includes(:ingredient, :unit)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[1]
price[4]
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })exit
exit
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2] / price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_f)
price[2] / price[3]
price[2].to_i / price[3].to_i
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
Price.all
exit
exit
exit
exit
target_url_array
exit
amount = "中1個"
amount_1 = "中1個"
exit
amount
/*[大中小]+[0-9]+[個本コこケ]/.match(amount)
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '小11コ'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = amount.match(/.*[0-9]+[個本コこケ]+/)
amount
amount = amount.match(/[0-9]+[個本コこケ]+/)
amount
amount[0]
amount[1]
amount = amount.match(/[大中小]*([0-9]+[個本コこケ]+)/)
amount = amount.match(/[大中小]*(.+)[個本コこケ]+/)
amount = amount.match(/小(.+)コ/)
amount
amount = "小11コ"
amount = amount.match(/小(.+)コ/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+)[個本コこケ]+/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '小11コ(500g)'
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '小11コ(500g)'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '大さじ1.5'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
amount = '大1.5'
/[大中小]*[0-9]+[個本コこケ]+/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大さじ1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = "大さじ1(15ml)"
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]/.match(amount)
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]+/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]*[^個本コこケ]¥Z/.match(amount)
amount = '大1コ'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]*[さじ]*[匙]*[0-9]¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+¥Z/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]+/.match(amount)
amount = '大1'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '大1コ'
/[大小]+[さじ]*[匙]*[0-9]$/.match(amount)
amount = '中10コ~12コ'
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]*[0-9]*([個本コこケ])+/)
amount = '中10~12コ'
amount = amount.match(/[大中小]*(.)+[〜]+([個本コこケ])+/)
amount = '中10~12コ'

amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]
amount = '中10~12コ'
amount = amount.match(/[大中小]*(0-9)+[~0-9]/)
amount = "小11コ"
amount = amount.match(/[大中小]*(.+[個本コこケ])+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~0-9]+/)
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~ 0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[0-9]+/)
amount = '10~11'
amount = amount.match(/(0-9)+[~[0-9]]+/)
amount = '10~11'
amount = amount.match(/(0-9)/)
amount = '10~11'
amount = amount.match(/(0-9)+/)
amount = '10~11'
amount = amount.match(/([0-9]+/)
amount = '10~11'
amount = amount.match(/([0-9]+)/)
amount = '10~11'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+([0-9]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9+([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~11コ'
amount = amount.match(/([0-9]+)[~]*[0-9]*([個本コこケ]*)/)
amount = '1.5~2コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
amount = '10~11コ'
amount = amount.match(/([0-9.]+)[~]*[0-9.]*([個本コこケ]*)/)
exit
s.id  = ingredient_unit[0]
s.ingredient = Ingredient.find_by(name: ingredient_unit[1])
s.unit = Unit.find_by(unit: ingredient_unit[2])
exit
IngredientUnit.all
exit
IngredientUnit.all
exit
IngredientUnit.all
Ingredient.find_by(name: price[1])
Ingredient.all
price[2]
quantity
price[3]
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]}).ratio
IngredientUnits.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.includes(:unit).find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: {unit: price[4]})
IngredientUnits.find_by(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) })
IngredientUnits.find_by(ingredient_unit: { ingredient_id: 1 })
IngredientUnits.find_by(ingredient_unit: 1)
IngredientUnits.all
IngredientUnits.all
Units.all
exit
Synonyms.all
Synonym.all
Synonyms.all
exit
Ingredient.all
IngredientUnits.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: 1 , unit: { unit: price[4] })
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] })
Ingredient.find_by(name: 'ごはん')
Ingredient.all
Ingredient.all
Ingredients.all
Ingredient.all
exit
Ingredient.all
IngredientUnit.all
IngredientUnit.includes(:unit).where(ingredient_unit: { ingredient_id: Ingredient.find_by(name: price[1]) }, unit: { unit: price[4] }))
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_i
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
IngredientUnit.includes(:ingredient, :unit)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[1]
price[4]
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })exit
exit
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] })
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2] / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2] / price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2].to_i / (price[3] * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio.to_f)
price[2] / price[3]
price[2].to_i / price[3].to_i
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
Price.all
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[0]
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
price[2].to_i / (price[3].to_i * IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: price[1] }, unit: { unit: price[4] }).ratio)
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
Price.all
exit
if !(/[0-9.]+/.match(quantity_unit))\
  eid\
end
!(/[0-9.]+/.match(quantity_unit))
/([大小]+[さじ]*[匙]*)([0-9.]*)[~]*[0-9.]*/.match(quantity_unit)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z]*)/.match(quantity_unit)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = '100～150グラム'
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = '100～150グラム'
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = '100～150g'
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = '100～150g'
quantity_unit = '100～150コ'
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = '100～150コ'
/([0-9]+)[~]+[0-9]+([個本コこケ]*)/.match(quantity_unit)
quantity_unit = '100～150コ'
/([0-9]+)[~]+[0-9]+([個本コこケ]*)/.match(quantity_unit)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
exit
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
exit
quantity_unit
exot
exit
exit
quantity_unit
exit
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
exit
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(quantity_unit)
amount = '10~11コ'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケ]*)/)
amount = '10~11グラム'
amount = amount.match(/([0-9]+)[~]+[0-9]+([個本コこケグラム]*)/)
amount = '10~11グラム'
/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-zグラム]*)/.match(amount)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
quantity_unit = "100~150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = "約100~150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100~150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "約100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity = "100～150グラム"
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '100~150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100~150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100~150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~〜 　]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|グラム|]*)/.match(quantity_unit)
quantity_unit = '約100～150グラム'
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
exit
exit
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~〜]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z]*)/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/.match(quantity_unit)
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z]*)/)
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/)
exit
quantity_unit = quantity_unit.match(/([0-9.]+)[~～]*[0-9.]*([個本コこケ缶片袋杯膳束合枚鞘房a-z|グラム|]*)/)
exit
unit = quantity_unit[2]
quantity = quantity_unit[1].to_i
quantity_unit = "#{quantity_unit[2]}#{quantity_unit[1]}"
exit
unit = quantity_unit[2]
unit
quantity = quantity_unit[1].to_i
quantity_unit = "#{quantity_unit[1]}#{quantity_unit[2]}"
if unit == Ingredient.find_by(name: ingredient).base_unit\
  amount = quantity\
else\
  ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i\
  amount = ratio * quantity\
end
cost = amount * Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).one_base_unit_price
@recipe_id = Recipe.find_by(recipe_url: params[:url]).id
@food_cost = FoodCost.find_or_initialize_by(recipe_id: @recipe_id, quantity_unit: quantity_unit, cost: cost, price_id: Price.includes(:ingredient).find_by(ingredient: { name: ingredient }).id)
if @food_cost.new_record? && !@food_cost.save\
  render :about\
end
exit
unit
exit
unit
exit
unit
exit
unit
exit
unit
exit
unit
ingredient
exit
ingredient
exit
exit
exit
exit
exit
exit
exit
quantity = 1
unit = quantity_unit.match(/[亜-熙ぁ-んァ-ヶ]+/)
unit = quantity_unit.match(/[適量]+/)
quantity_unit = full_to_half(node.css('.recipe_material__item_serving').text.strip)
unit = quantity_unit.match(/[亜-熙ぁ-んァ-ヶ]+/)
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '100~150g'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '100~150g'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '100~150g'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '少々'
unit = quantity_unit.match(/[^\x01-\x7E]+/)
unit = '少々'
unit = quantity_unit.match(/[亜-熙ぁ-んァ-ヶ]/)
exit
quantity = 1
unit = quantity_unit.match(/[^\x01-\x7E]+/)
exit
unit
exit
unit
unit
unit
exit
unit
exit
unit
exit
unit
exit
unit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
unit.string
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
unit
exit
exit
exit
exit
exit
exit
unit
exit
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
amount = ratio * quantity
amount
ratio
quantity
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
amount = ratio * quantity
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
ingredient
unit
exit
exit
ratio = IngredientUnit.includes(:ingredient, :unit).find_by(ingredient: { name: ingredient }, unit: { unit: unit }).ratio.to_i
exit
